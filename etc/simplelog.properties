# Simple Log properties file
# $Id: simplelog.properties,v 1.2 2004-12-15 10:32:17 grlea Exp $

###################################################################################################
# Debug Levels
#
# Debug levels for classes and packages are defined simply by entering the fully-qualified class or
# package name and making the value a number (note: '=' is optional in Java properties files).
#
# The debug level for a class is acquired hierarchically:
# First the class name is sought, then its package, then its parent package, etc.
#
# Note that if you have a package called 'trace', something will go wrong. :)
#
# Levels are defined as:
# (see org.grlea.log.DebugLevel javadoc for details)
#
#     1: Fatal
#     2: Error
#     3: Warning
#     4: Info
#     5: Debug
#     6: Verbose
#     7: Ludicrous
#
# Example: org.grlea.application.ApplicationMain:       Verbose
#          All other 'org.grlea.application' classes:   Debug
#          All other 'org.grlea' classes:               Error
#
# org.grlea.application.ApplicationMain 6
# org.grlea.application 5
# org.grlea 2





###################################################################################################
# Tracing
#
# Tracing is the same as debug levels except the string '.trace' must be appended to the class or
# package name, and the values are true or false.
#
# Example:
#
# org.grlea.application.ApplicationMain.trace true
# org.grlea.application.trace false






###################################################################################################
# Other properties
#
# Here are all the other settable properties and their default values (unless you've changed them).


# Send log output to a file (rather than to System.err): relative or absolute file name.
# Relative paths are relative to the JVM's working directory.
# Non-existing directories are created.
# Output falls back to System.err if the file can't be opened for writing.

#simplelog.logFile =


# Reload properties if they change: true or false

#simplelog.reloading = false


# Default level for classes for which no debug level hierarchy exists:
# same numbers as normal (i.e. 1-7)

#simplelog.defaultLevel = 4


# Default tracing for classes for which no tracing hierarchy exists: true or false

#simplelog.defaultTrace = false


# Date format for ALL message formats: see java.text.SimpleDateFormat

#simplelog.dateFormat = EEE dd/mm/yyyy HH:mm:ss.SSS


# Whether the exception message should print a stack trace: true or false

#simplelog.printStackTraces = true


# Message formats for each type of logging: see java.text.MessageFormat
# Note there is a different format for SimpleLoggers created on a per-instance basis
#
# The common message arguments are:
#
# {0} = Current date/time (java.util.Date)
# {1} = Thread name (String)
# {2} = Class name (String)
# {3} = Instance ID (Object)
#
# The uncommon message arguments are:
#
# debug:          {4} = message
# debugObject:    {4} = object name, {5} = object value
# debugException: {4} = exception
# entry:          {4} = method name
# exit:           {4} = method name

#simplelog.format.debug =           {0}|   |{1}|{2}|{4}
#simplelog.format.debugObject =     {0}|---|{1}|{2}|{4}|{5}
#simplelog.format.debugException =  {0}|***|{1}|{2}|{4}
#simplelog.format.entry =           {0}|>>>|{1}|{2}|{4}
#simplelog.format.exit =            {0}|<<<|{1}|{2}|{4}

#simplelog.format.debug.instance =           {0}|   |{1}|{2}[{3}]|{4}
#simplelog.format.debugObject.instance =     {0}|---|{1}|{2}[{3}]|{4}|{5}
#simplelog.format.debugException.instance =  {0}|***|{1}|{2}[{3}]|{4}
#simplelog.format.entry.instance =           {0}|>>>|{1}|{2}[{3}]|{4}
#simplelog.format.exit.instance =            {0}|<<<|{1}|{2}[{3}]|{4}

