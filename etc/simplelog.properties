# Simple Log properties file
# $Id: simplelog.properties,v 1.8 2005-05-15 16:01:10 grlea Exp $

# Copyright (c) 2004-2005 Graham Lea. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


###################################################################################################
# Debug Levels
#
# Debug levels for classes and packages are defined simply by entering a fully-qualified class or
# package name and making the value either the number or name of one of Simple Log's DebugLevels.
# (Note: '=' is optional in Java properties files).
#
# When the name of a debug level is used:
#    - the "Lx_" prefix from the field name is NOT used (e.g. the name of L1_FATAL is "FATAL");
#    - the names are case-insensitive (i.e. "FATAL" = "Fatal" = "fatal")
#
# The debug level for a class is acquired hierarchically:
# First the class name is sought, then its package, then its parent package, etc.
# If no level is found for a class or any of its containing packages, the default level is used.
#
# Levels are defined as:
# (see org.grlea.log.DebugLevel javadoc for details)
#
#     1 = Fatal
#     2 = Error
#     3 = Warning
#     4 = Info
#     5 = Debug
#     6 = Verbose
#     7 = Ludicrous
#
# Example: org.grlea.application.ApplicationMain:       Verbose
#          All other 'org.grlea.application' classes:   Debug
#          All other 'org.grlea' classes:               Error
#
# org.grlea.application.ApplicationMain 6
# org.grlea.application 5
# org.grlea 2
#
#    OR
#
# org.grlea.application.ApplicationMain = verbose
# org.grlea.application = debug
# org.grlea = error




###################################################################################################
# Tracing
#
# Tracing is the same as debug levels except the string '#trace' must be appended to the class or
# package name, and the values are true or false.
#
# Example:
#
# org.grlea.application.ApplicationMain#trace true
# org.grlea.application#trace false






###################################################################################################
# Other properties
#
# Here are all the other settable properties and their default values (unless you've changed them).


# Send log output to a file (rather than to System.err): relative or absolute file name.
#
# If the interpretName property is true (default), the file name will be interpreted using a
# MessageFormat, with argument 0 being the current Date. This allows the date to be inserted into
# the file name using patterns like {0,date,yyyy_MM_dd} or {0,date,yyyy} and {0,date,MM}, etc.
#
# Relative paths are relative to the JVM's working directory.
# Non-existing directories are created.
# Output falls back to System.err if the file name can't be interpreted or the file can't be opened
# for writing.

#simplelog.logFile = 


# Whether the logFile property should be interpreted using a MessageFormat: true or false
# See the description for simplelog.logFile above for more details.

#simplelog.logFile.interpretName = true


# When writing log output to a file, append to the file if it already exists: true or false

#simplelog.logFile.append = true


# Whether the logging output going to a file should also be output to the console: true or false
# Only applies when simplelog.logFile is assigned.

#simplelog.logFile.andConsole = false


# Reload properties if they change: true or false

#simplelog.reloading = false


# Default level for classes for which no debug level hierarchy exists:
# same numbers as normal (i.e. 1-7)

#simplelog.defaultLevel = 4


# Default tracing for classes for which no tracing hierarchy exists: true or false

#simplelog.defaultTrace = false


# Date format for ALL message formats: see java.text.SimpleDateFormat

#simplelog.dateFormat = EEE yyyy/MM/dd HH:mm:ss.SSS


# Whether the exception message should print a stack trace: true or false

#simplelog.printStackTraces = true


# Message formats for each type of logging: see java.text.MessageFormat
# Note there is a different format for SimpleLoggers created on a per-instance basis
#
# The common message arguments are:
#
# {0} = Current date/time (java.util.Date)
# {1} = Thread name (String)
# {2} = Class name (String)
# {3} = Instance ID (Object)
# {4} = Debug level (DebugLevel)
#
# The uncommon message arguments are:
#
# debug:          {5} = message
# debugObject:    {5} = object name, {6} = object value
# debugException: {5} = exception
# entry:          {5} = method name
# exit:           {5} = method name

#simplelog.format.debug =           {0}|   |{1}|{2}|{5}
#simplelog.format.debugObject =     {0}|---|{1}|{2}|{5}|{6}
#simplelog.format.debugException =  {0}|***|{1}|{2}|{5}
#simplelog.format.entry =           {0}|>>>|{1}|{2}|{5}
#simplelog.format.exit =            {0}|<<<|{1}|{2}|{5}

#simplelog.format.debug.instance =           {0}|   |{1}|{2}[{3}]|{5}
#simplelog.format.debugObject.instance =     {0}|---|{1}|{2}[{3}]|{5}|{6}
#simplelog.format.debugException.instance =  {0}|***|{1}|{2}[{3}]|{5}
#simplelog.format.entry.instance =           {0}|>>>|{1}|{2}[{3}]|{5}
#simplelog.format.exit.instance =            {0}|<<<|{1}|{2}[{3}]|{5}

